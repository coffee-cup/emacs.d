#+TITLE: Emacs Configuration
#+AUTHOR: Jake Runzer
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* User Details

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jake Runzer")
  (setq user-mail-address "jakerunzer@gmail.com")
#+END_SRC

* Package Manager
** Setup
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Always Ensure

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

* Path

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/purcell/exec-path-from-shell
  ;; only need exec-path-from-shell on OSX
  ;; this hopefully sets up path and other vars better
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

* Better Defaults

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
        version-control t
        delete-by-moving-to-trash t
        vc-make-backup-files t
        backup-directory-alist `(("." . "~/.emacs.d/backups"))
        vc-follow-symlinks t
        auto-save-file-name-transforms '((".*"
                                          "~/.emacs.d/auto-save-list/" t))
        inhibit-startup-screen t
        ring-bell-function 'ignore
        frame-title-format  "%b"
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8
        sentence-end-double-space nil
        default-fill-column 80
        initial-scratch-message "<3"
        tab-width 2
        indent-tabs-mode nil
        require-final-newline t
        load-prefer-newer t
        gc-cons-threshold 64000000)

  ;; line highlighting
  (global-hl-line-mode)

  (defalias 'yes-or-no-p 'y-or-n-p)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

* Keybinding Manager

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-mode))

  (use-package general)
#+END_SRC

* Space Bindings

#+BEGIN_SRC emacs-lisp
  (defconst my-leader "SPC")
  (defconst my-local-leader ",")

  (general-create-definer my-leader-def
    :prefix my-leader)

  (general-create-definer my-local-leader-def
    :prefix my-local-leader)

  (my-leader-def
    :states '(normal visual insert emacs)
    :non-normal-prefix "C-SPC"

    ;; simple commands
    "'"   '(iterm-focus :which-key "iterm")
    "?"   '(iterm-goto-filedir-or-home :which-key "iterm dir")
    "/"   'counsel-ag
    "TAB" '(switch-to-previous-buffer :which-key "prev buffer")
    "SPC" '(counsel-M-x :which-key "M-x")
    "h"   '(counsel-descbinds :which-key "describe bindings")
    "m"   '(recenter :which-key "recenter")
    "i"   '(imenu :which-key "imenu")

    ;; avy
    "c" '(avy-goto-word-1 :which-key "word")

    ;; files
    "f"  '(:ignore t :which-key "files")
    "ff" '(counsel-find-file :which-key "find file")
    "fr" '(counsel-recentf :which-key "recent files")
    "fs" '(save-buffer :which-key "save file")

    ;; projects
    "p"  '(:ignore t :which-key "projects")
    "pf" '(counsel-projectile-find-file :which-key "find file")
    "pl" '(counsel-projectile-switch-project :which-key "switch project")
    "pg" '(counsel-git-grep :which-key "search project")

    ;; buffers
    "b"  '(:ignore t :which-key "buffers")
    "bb" '(ivy-switch-buffer :which-key "switch buffers")
    "bd" '(kill-current-buffer :which-key "kill current buffer")
    "bp" '(previous-buffer :which-key "previous buffer")
    "bn" '(next-buffer :which-key "next buffer")
    "bD" '(kill-buffers :which-key "kill buffers")
    "bf" '(frog-jump-buffer :which-key "frog jump buffer")

    ;; windows
    "w"  '(:ignore t :which-key "windows")
    "wa" '(ace-window :which-key "ace")
    "wd" '(delete-window :which-key "delete window")
    "wl" '(windmove-right :which-key "right window")
    "wh" '(windmove-left :which-key "left window")
    "wj" '(windmove-down :which-key "down window")
    "wk" '(windmove-up :which-key "up window")
    "w/" '(split-window-horizontally :which-key "split horizontally")
    "w-" '(split-window-vertically :which-key "split vertically")
    "wb" '(zoom :which-key "balance")
    "ws" '(ace-swap-window :which-key "swap")

    ;; sidebar
    "t" '(treemacs :which-key "sidebar")

    ;; errors
    "e"  '(:ignore t :which-key "errors")
    "ef" '(flycheck-first-error :which-key "first error")
    "el" '(hydra-flycheck/body :which-key "list errors")
    "en" '(flycheck-next-error :which-key "next error")
    "ep" '(flycheck-previous-error :which-key "prev error")
    "ev" '(flycheck-verify-setup :which-key "verify setup")
    "es" '(flycheck-select-checker :which-key "select checker")
    "ec" '(flycheck-clear :which-key "clear")
    "eb" '(flycheck-buffer :which-key "check buffer")

    ;; git
    "g"  '(:ignore t :which-key "git")
    "gs" '(magit-status :which-key "status")
    "gl" '(:ignore t :which-key "logs")
    "gll" '(magit-log-head :which-key "head")
    "glb" '(magit-log-branches :which-key "branches")

    ;; ring buffer
    "r"  '(:ignore t :which-key "ring buffer")
    "ry" '(counsel-yank-pop :which-key "search history")

    ;; dash docs
    "d"  '(:ignore t :which-key "dash")
    "dd" '(dash-at-point :which-key "dash at point")
    "de" '(dash-at-point-with-docset :which-key "at point w/docset")

    ;; Applications
    "a"   '(:ignore t :which-key "applications")
    "at"  '(org-todo-list :which-key "todos")
    "ad"  '(dired :which-key "dired")
    "ac"  '(calendar :which-key "calendar")
    "ao"  '(:ignore t :which-key "org")
    "aol" '(org-agenda-show-agenda-and-todo :which-key "list")
    "aoc" '(org-capture :which-key "capture")
    "av"  '(org-brain-visualize :which-key "brain"))
#+END_SRC

* Evil
** Setup

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
    (evil-collection-wdired-setup))

  (setq evil-collection-company-use-tng nil)
#+END_SRC
** Keybindings

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape)
  (evil-escape-mode)
  (setq-default evil-escape-key-sequence "jk"
                evil-escape-delay 0.1)

  ;; (defun evil-keyboard-quit ()
  ;;   "Keyboard quit and force normal state."
  ;;   (interactive)
  ;;   (and evil-mode (evil-force-normal-state))
  ;;   (keyboard-quit)
  ;;   (setq unread-command-events (listify-key-sequence "ESC")))

  ;; (general-define-key
  ;;  :keymaps '(evil-normal-state-map
  ;;             evil-motion-state-map
  ;;             evil-insert-state-map
  ;;             evil-window-map
  ;;             evil-operator-state-map
  ;;             company-mode-map
  ;;             company-active-map
  ;;             company-filter-map
  ;;             company-search-map
  ;;             )
  ;;  "C-g" 'evil-keyboard-quit)

  (general-define-key
   :states 'normal
   "gc" 'evilnc-comment-or-uncomment-lines)
#+END_SRC
** Surround

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC

** Args

#+BEGIN_SRC emacs-lisp
  (use-package evil-args)

  ;; locate and load the package
  (add-to-list 'load-path "path/to/evil-args")
  (require 'evil-args)

  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

  ;; bind evil-forward/backward-args
  (define-key evil-normal-state-map "L" 'evil-forward-arg)
  (define-key evil-normal-state-map "H" 'evil-backward-arg)
  (define-key evil-motion-state-map "L" 'evil-forward-arg)
  (define-key evil-motion-state-map "H" 'evil-backward-arg)

  ;; bind evil-jump-out-args
  (define-key evil-normal-state-map "K" 'evil-jump-out-args)
#+END_SRC

* Movement

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   "C-}" 'evil-scroll-line-down
   "C-{" 'evil-scroll-line-up)
#+END_SRC

* Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy)
#+END_SRC

* Ivy/Counsel/Swiper
** Deps

#+BEGIN_SRC emacs-lisp
  (use-package smex)
  (use-package flx)
#+END_SRC

** Configuration

#+BEGIN_SRC emacs-lisp
  (use-package ivy
      :diminish (ivy-mode . "")             ; does not display ivy in the modeline
      :init
      (ivy-mode 1)                          ; enable ivy globally at startup
      :bind (:map ivy-minibuffer-map        ; bind in the ivy buffer
          ("RET" . ivy-alt-done)
          ("C-j" . ivy-next-line)
          ("s-<"  . ivy-avy)
          ("s->"  . ivy-dispatching-done)
          ("s-+" . ivy-call)
          ("s-!" . ivy-immediate-done)
          ("s-[" . ivy-previous-history-element)
          ("s-]" . ivy-next-history-element))
      :config
      (setq ivy-use-virtual-buffers t)       ; extend searching to bookmarks and
      (setq ivy-height 20)                   ; set height of the ivy window
      (setq ivy-count-format "(%d/%d) ")     ; count format, from the ivy help page
      (setq ivy-display-style 'fancy)
      (setq ivy-format-function 'ivy-format-function-line)
      (setq ivy-initial-inputs-alist nil))
      (setq ivy-re-builders-alist
            '((swiper            . ivy--regex-plus)
              (t                 . ivy--regex-fuzzy)))

  (use-package swiper)
  (use-package counsel
    :config
    (counsel-mode 1))

  (general-define-key
   :states '(normal motion insert visual)
   "C-s" 'swiper
   "M-x" 'counsel-M-x)
#+END_SRC

** Popups

#+BEGIN_SRC emacs-lisp
  (use-package ace-popup-menu
    :config
    (ace-popup-menu-mode))
#+END_SRC

* Theme
** Bars

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Mac look and feel

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
#+END_SRC

** Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Office Code Pro-14"))

  (global-prettify-symbols-mode +1)
#+END_SRC

** Colours

#+BEGIN_SRC emacs-lisp
  ;; (use-package doom-themes)
  ;; (load-theme 'doom-spacegrey t)

  ;; ;; Global settings (defaults)
  ;; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;       doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; ;; or for treemacs users
  ;; (doom-themes-treemacs-config)

  ;; ;; Corrects (and improves) org-mode's native fontification.
  ;; (doom-themes-org-config)

  (use-package solarized-theme
    :init
    (load-theme 'solarized-dark t)
    :config
    (setq solarized-use-less-bold t
          solarized-use-variable-pitch nil
          solarized-scale-org-headlines nil
          solarized-height-minus-1 1.0
          solarized-height-plus-1 1.0
          solarized-height-plus-2 1.0
          solarized-height-plus-3 1.0
          solarized-height-plus-4 1.0))

  ;; (use-package zenburn-theme
  ;;   :init
  ;;   (load-theme 'zenburn t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :defer t
    :hook (after-init . doom-modeline-init))

  (setq doom-modeline-height 35
        doom-modeline-icon t)
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (setq-default cursor-type 'box)
  (set-cursor-color "#e98de9")
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

** Emojis

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :config
    (global-emojify-mode))
#+END_SRC
* Buffers
** Switch to buffer

#+BEGIN_SRC emacs-lisp
  (defun switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer)))
#+END_SRC

** Better duplicate buffer names

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

** Frog buffer

#+BEGIN_SRC emacs-lisp
  (use-package frog-jump-buffer)
#+END_SRC

* Text
** Autofill

#+BEGIN_SRC emacs-lisp
  (setq default-fill-column 120)

  (defun better-text-hook ()
    "Autofill and word wrap."
    (message "Better Text")
    ;; Turn off line numbering, it makes org so slow
    (linum-mode -1)
    ;; Set fill column to 79
    (setq fill-column 80)
    ;; Enable automatic line wrapping at fill column
    (auto-fill-mode t))

  (add-hook 'LaTeX-mode-hook 'better-text-hook)
  (add-hook 'org-mode-hook 'better-text-hook)
  (add-hook 'text-mode-hook 'better-text-hook)
  (add-hook 'markdown-mode-hook 'better-text-hook)
#+END_SRC

** Expand region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :config
    (setq delete-selection-mode t))

  (delete-selection-mode)

  (general-define-key
   "C-=" 'er/expand-region)
#+END_SRC

** Parens

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)

  (setq show-paren-delay 0
        show-paren-when-point-inside-paren t)

  (use-package rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode-enable)
  (electric-pair-mode t)

  ;; disable {} auto pairing in electric-pair-mode for web-mode
  (add-hook
   'rust-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c)
                    (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

  (use-package smartparens)

  (add-hook 'rust-mode-hook (lambda ()
                              (smartparens-mode +1)
                              (electric-pair-mode nil)))
#+END_SRC

** Commenting

#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter)
#+END_SRC

** Move text

#+BEGIN_SRC emacs-lisp
  (use-package move-text)
  (use-package drag-stuff)

  (general-define-key
   :states 'visual
   "C-j" 'drag-stuff-down
   "C-k" 'drag-stuff-up)

  (general-define-key
   :states 'normal
   "M-n" 'drag-stuff-down
   "M-p" 'drag-stuff-up)
#+END_SRC

** Indent and buffer cleanup

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer."
    (interactive)
    (indent-buffer)
    (untabify-buffer)
    (delete-trailing-whitespace))

  (defun cleanup-region (beg end)
    "Remove tmux artifacts from region."
    (interactive "r")
    (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
      (replace-regexp re "" nil beg end)))

  (general-define-key
   "C-c n" 'cleanup-buffer)

  (setq-default show-trailing-whitespace nil)
#+END_SRC

** Highlight at point

#+BEGIN_SRC emacs-lisp
  (require 'hi-lock)
  (defun toggle-mark-word-at-point ()
    (interactive)
    (if hi-lock-interactive-patterns
        (unhighlight-regexp (car (car hi-lock-interactive-patterns)))
      (highlight-symbol-at-point)))

  (general-define-key
   :states '(normal motion)
   "s-." 'toggle-mark-word-at-point)
#+END_SRC

* Window Management

#+BEGIN_SRC emacs-lisp
  (use-package ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

  (general-define-key
   "C-x o" 'ace-window)
#+END_SRC

** Golden ratio

#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :init
    (zoom-mode t))

  (defun size-callback ()
    (cond ((> (frame-pixel-width) 1280) '(90 . 0.6))
          (t                            '(0.5 . 0.5))))

  (setq zoom-size 'size-callback)
#+END_SRC

** Buffer alist config

#+BEGIN_SRC emacs-lisp
  (defvar jake/help-temp-buffers '("^\\*Flycheck errors\\*$"
                                   "^\\*Completions\\*$"
                                   "^\\*GHC error\\*$"
                                   "^\\*Help\\*$"
                                   "^\\*HTTP Response\\*$"
                                   "^\\*TeX Help\\*$"))

  (while jake/help-temp-buffers
    (add-to-list 'display-buffer-alist
                 `(,(car jake/help-temp-buffers)
                   (display-buffer-reuse-window
                    display-buffer-below-selected)
                   (reusable-frames     . visible)
                   (side                        . bottom)
                   (window-height               . 0.30)))
    (setq jake/help-temp-buffers (cdr jake/help-temp-buffers)))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*compilation*" eos)
                 (display-buffer-reuse-window
                  display-buffer-below-selected)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.4)))
#+END_SRC
* Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :after dired)

  (general-define-key
   :keymaps 'dired-mode-map
   "<tab>" #'dired-subtree-cycle
   "<backtab>" #'dired-subtree-cycle)

  (eval-after-load 'dired
    '(progn
       ;; use the standard Dired bindings as base
       (evil-make-overriding-map dired-mode-map 'normal t)
       (general-define-key
        :states '(normal)
        :keymaps 'dired-mode-map
        "h" 'evil-backward-char
        "j" 'evil-next-line
        "k" 'evil-previous-line
        "l" 'evil-forward-char
        "J" 'dired-goto-file
        "K" 'dired-do-kill-lines
        "r" 'revert-buffer
        "DEL" 'dired-up-directory
        "<tab>" #'dired-subtree-toggle
        "<backtab>" #'dired-subtree-cycle)))

  (setq dired-auto-revert-buffer t)
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit)

  (use-package git-gutter
    :config
    (global-git-gutter-mode 1))
  (use-package git-gutter-fringe)
#+END_SRC

** Gist

#+BEGIN_SRC emacs-lisp
  (use-package tabulated-list)
  (use-package pcache)
  (use-package logito)
  (use-package gh)
  (use-package gist)
#+END_SRC

* Projects

#+BEGIN_SRC emacs-lisp
  (use-package projectile)
  (use-package counsel-projectile)

  (projectile-mode)
  (counsel-projectile-mode)
#+END_SRC

* Macros

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'normal
   "m" 'kmacro-end-or-call-macro)
#+END_SRC

* Dash Docs

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point)
#+END_SRC
* Tree
** Treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         40)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC

* Undo Tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
  (use-package yasnippet-snippets)

  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"                 ;; personal snippets
          ))

  (yas-global-mode 1)
#+END_SRC

* Org
** Evil Org

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

** Speed keys

#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

** Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
                              ;; make the lines wrap around edge of screen
                              (visual-line-mode)
                              (org-indent-mode)))

  (setq evil-org-key-theme '(textobjects navigation additional insert todo))

  (defun disable-fylcheck-in-org-src-block ()
    (flycheck-mode -1))

  ;; (add-hook 'org-src-mode-hook 'disable-flycheck-in-org-src-block)
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'org-mode-map
   "C-c t" 'org-time-stamp-inactive
   "C-c r" 'org-set-tags
   "C-c g" 'org-update-statistics-cookies
   "C-c a" 'org-archive-subtree)
#+END_SRC

** Log Done

#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-agenda-files (list "~/Dropbox/org/todos.org"
                               "~/Dropbox/org/assignments.org"
                               "~/Dropbox/org/notes.org"
                               "~/Dropbox/org/prodo.org"
                               "~/Dropbox/org/did.org"
                               ))

  (defun org-agenda-show-agenda-and-todo (&optional arg)
    (interactive "P")
    (org-agenda arg "n"))
#+END_SRC

** Capture Templates

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (with-eval-after-load 'org
    (setq org-capture-templates '())
    (add-to-list 'org-capture-templates
                 '("t" "Todo" entry
                   (file "~/Dropbox/org/todos.org")
                   "* TODO %^{What Do}"
                   :empty-lines-after 1))
    (add-to-list 'org-capture-templates
                 '("d" "Did" entry
                   (file+headline "~/Dropbox/org/did.org" "Did")
                   "* %?\n%U"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("k" "Keep" entry
                   (file+headline "~/Dropbox/org/keep.org" "Keep")
                   "* %?\n%U"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("n" "Note" entry
                   (file "~/Dropbox/org/notes.org")
                   "* %^{Title}\n%U\n\n%?\n"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("a" "Assignment" entry
                   (file+headline "~/Dropbox/org/assignments.org" "Assignments")
                   "* TODO %^{Title} %^g\n DEADLINE: %^{Deadline}t\n"
                   :prepend t
                   :empty-lines 1)))
#+END_SRC

** Org Brain

#+BEGIN_SRC emacs-lisp
  (use-package org-brain
    :init
    (setq org-brain-path "~/Dropbox/org/brain")
    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12))
#+END_SRC
* Autocompete

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 2
          company-show-numbers nil
          company-tooltip-limit 20
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case t
          company-tooltip-align-annotations t))

  (use-package company-flx
    :after company
    :config
    (company-flx-mode 1)
    )

  (general-define-key
   :keymaps '(company-active-map company-search-map)
   "C-n" 'company-select-next
   "C-p" 'company-select-previous)

  (general-define-key
   :keymaps '(insert)
   "C-SPC C-SPC" 'company-complete)
#+END_SRC
* Hydras

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

** Text Size

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom nil
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-flycheck
    (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
     :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
     :hint nil)
    "Errors"
    ("f"  flycheck-error-list-set-filter                            "Filter")
    ("j"  flycheck-next-error                                       "Next")
    ("k"  flycheck-previous-error                                   "Previous")
    ("gg" flycheck-first-error                                      "First")
    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
    ("q"  nil))

  (general-define-key
   "C-x f" '(hydra-flycheck/body :which-key "hydra flycheck"))
#+END_SRC
* Key Frequency

#+BEGIN_SRC emacs-lisp
  (use-package keyfreq)
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
#+END_SRC

* Rest Client

#+BEGIN_SRC emacs-lisp
  (use-package restclient)
  (use-package company-restclient)
#+END_SRC

* Wakatime

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :config
    (setq wakatime-api-key "f175432d-53db-4495-9ef3-a518b67d4c1a")
    (global-wakatime-mode)
    )
#+END_SRC

* Server

So we can connect to emacs with ~emacsclient~

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* Languages
** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (defun flycheck-list-errors-toggle ()
    "Toggle the error list for the current buffer."
    (interactive)
    (let ((flycheck-errors-window (get-buffer-window flycheck-error-list-buffer)))
      (if (not (window-live-p flycheck-errors-window))
          (call-interactively 'flycheck-list-errors)
        (delete-window flycheck-errors-window))))

  (setq flycheck-display-errors-delay 0.3)
#+END_SRC

*** Flycheck inline

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/flycheck-inline.el")

  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))

  (with-eval-after-load 'flycheck-inline
    (flycheck-inline-mode))
#+END_SRC

** Spelling

#+BEGIN_SRC emacs-lisp
  (defun my-spellcheck-mode ()
    (flyspell-mode))

  (defun my-spellcheck-prog-mode ()
    (flyspell-prog-mode))

  (add-hook 'org-mode-hook 'my-spellcheck-mode)
  (add-hook 'markdown-mode-hook 'my-spellcheck-mode)
  (add-hook 'text-mode-hook 'my-spellcheck-mode)
  (add-hook 'latex-mode-hook 'my-spellcheck-mode)

  (defun mk-flyspell-correct-previous (&optional words)
    "Correct word before point, reach distant words.

  WORDS words at maximum are traversed backward until misspelled
  word is found.  If it's not found, give up.  If argument WORDS is
  not specified, traverse 12 words by default.

  Return T if misspelled word is found and NIL otherwise.  Never
  move point."
    (interactive "P")
    (let* ((Δ (- (point-max) (point)))
           (counter (string-to-number (or words "12")))
           (result
            (catch 'result
              (while (>= counter 0)
                (when (cl-some #'flyspell-overlay-p
                               (overlays-at (point)))
                  (flyspell-correct-word-before-point)
                  (throw 'result t))
                (backward-word 1)
                (setq counter (1- counter))
                nil))))
      (goto-char (- (point-max) Δ))
      result))

  (general-define-key
   "C-c s" 'mk-flyspell-correct-previous)
#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp)

  (require 'lsp-clients)
  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-ignore-duplicate t
          lsp-ui-sideline-enable nil
          lsp-ui-sideline-show-diagnostics nil
          lsp-ui-sideline-show-code-actions nil
          lsp-ui-doc-enable nil
          lsp-ui-flycheck-enable t))

  (use-package company-lsp
    :commands company-lsp
    :config
    (push 'company-lsp company-backends)
    (setq company-lsp-async t
          company-lsp-cache-candidates 'auto
          company-lsp-enable-recompletion t))

  (general-define-key
   :keymaps 'lsp-mode-map
   "C-c C-d" 'lsp-ui-doc-show
   "C-c C-s" 'lsp-ui-doc-hide
   "C-c r" 'lsp-rename)
#+END_SRC

** Web

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2))

  ;; only use prettier for js/jsx web mode files
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))))
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.tsx?\\'" . prettier-js-mode))))

  ;; emmet
  (use-package emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'scss-mode-hook 'emmet-mode)
  (with-eval-after-load 'evil-maps
    (define-key evil-insert-state-map (kbd "C-p") 'emmet-expand-line))

  (setq css-indent-offset 2)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . setup-tide-mode)
           (typescript-mode . tide-hl-identifier-mode)))

  (setq typescript-indent-level 2)

  (defun tide-format()
    (message "nop"))

  ;; (add-to-list 'auto-mode-alist '("\\.tsx\\'" . (lambda ()
  ;;                                                 (web-mode)
  ;;                                                 (typescript-mode))))

  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode)
                (message "typescript!"))))

  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)

  (defun tslint-fix-file ()
    (interactive)
    (shell-command (concat "tslint --fix " (buffer-file-name)))
    (revert-buffer t t))

  (defun setup-tide-mode ()
    (interactive)
    (font-lock-fontify-buffer)
    (tide-mode)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (tide-restart-server)
    (company-mode +1))

  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  (general-define-key
   :keymaps '(typescript-mode-map web-mode-map)
   "C-c r" 'tide-rename-symbol
   "C-c o" 'tide-organize-imports
   :states 'motion
   "g d" 'tide-jump-to-definition
   "C-c l" 'setup-tide-mode)
#+END_SRC

** JavaScript
*** Node modules

#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path)

  (add-hook 'js-mode-hook #'add-node-modules-path)
  (add-hook 'typescript-mode-hook #'add-node-modules-path)
  (add-hook 'tide-mode-hook #'add-node-modules-path)
  (add-hook 'web-mode-hook #'add-node-modules-path)
  (add-hook 'rjsx-mode-hook #'add-node-modules-path)
#+END_SRC

*** Js2

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode)

  ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  ;; better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

  ;; configs
  (setq js-indent-level 2)
#+END_SRC

*** Jsx

React stuff

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
#+END_SRC

*** Tern

#+BEGIN_SRC emacs-lisp
  (use-package tern)
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
#+END_SRC

*** Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package company-tern)
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'js2-mode-hook (lambda ()
                              (tern-mode)
                              (company-mode)))
#+END_SRC

*** Eslint

#+BEGIN_SRC emacs-lisp
  ;; disable jshint since we prefer eslint
  (setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(javascript-jshint)))

  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

Use local version of eslint is available

#+BEGIN_SRC emacs-lisp
  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
          (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

*** Json

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

*** Prettier

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js)

  (setq prettier-js-args '(
                          "--trailing-comma" "all"
                          "--single-quote" "false"))

  (add-hook 'web-mode-hook #'prettier-js-mode)
  (add-hook 'typescript-mode-hook #'prettier-js-mode)
  (add-hook 'js2-mode-hook #'prettier-js-mode)
  (add-hook 'json-mode-hook #'prettier-js-mode)
  (add-hook 'rjsx-mode-hook #'prettier-js-mode)
#+END_SRC

*** Indium

#+BEGIN_SRC emacs-lisp
  (use-package indium)
#+END_SRC

*** Autogood

#+BEGIN_SRC emacs-lisp
  ;; (load "/Users/jakerunzer/.emacs.d/autogood.el")
  ;; (require 'autogood)

  ;; (add-hook 'typescript-mode-hook #'autogood-mode)
  ;; (add-hook 'js2-mode-hook #'autogood-mode)
  ;; (add-hook 'json-mode-hook #'autogood-mode)
  ;; (add-hook 'rjsx-mode-hook #'autogood-mode)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.hs" . haskell-mode))
    :hook ((haskell-mode . #'hindent-mode)))

  (use-package intero
    :after haskell-mode
    :hook ((haskell-mode . intero-mode)))

  (with-eval-after-load 'intero
    (flycheck-add-next-checker 'intero '(warning . haskell-hlint)))

  (use-package company-ghci
    :config
    (add-to-list 'company-backends 'company-ghci))

  (use-package hasky-stack)

  (setq haskell-stylish-on-save t)

  (add-hook 'haskell-mode-hook 'company-mode)
  (add-hook 'haskell-interactive-mode-hook 'company-mode)

  (general-define-key
   :states 'normal
   :keymaps 'haskell-mode-map
   "C-x C-e" 'hasky-stack-execute
   "C-c C-t" 'haskell-mode-show-type-at
   "C-c C-l" 'haskell-process-load-file)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)
  (use-package cargo)

  (add-hook 'rust-mode-hook #'lsp)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  (setq rust-format-on-save t)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.mdx\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package edit-indirect)
#+END_SRC

** Yaml

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC

** Vim

#+BEGIN_SRC emacs-lisp
  (use-package vimrc-mode)
  (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+END_SRC
** Krill

#+BEGIN_SRC emacs-lisp
  (defvar krill-file-path "/Users/jakerunzer/dev/krill/.stack-work/dist/x86_64-osx/Cabal-2.4.0.1/build/krill/krill"
    "Path to the krill program")

  (defun run-krill ()
    "Run a Krill interpreter."
    (interactive)
    (comint-run krill-file-path))
#+END_SRC
* Random

#+BEGIN_SRC emacs-lisp
  (use-package dad-joke)
#+END_SRC
