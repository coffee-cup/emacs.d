#+TITLE: Emacs Configuration
#+AUTHOR: Jake Runzer
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* User Details

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jake Runzer")
  (setq user-mail-address "jakerunzer@gmail.com")
#+END_SRC

* Package Manager
** Use Package

Bootstrap use-package

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Straight.el

Use [[https://github.com/raxod502/straight.el][straight.el]] package manager. It is functional and more easily allows you to
change the code in the packages.

#+BEGIN_SRC emacs-lisp
  ; Load straight.el package manager
  (let ((bootstrap-file (concat user-emacs-directory "straight/repos/straight.el/bootstrap.el"))
	(bootstrap-version 3))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ; use-package straight.el integration
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC
* Better Defaults

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t                                              ; delete excess backup version silently
        version-control t                                                  ; use version control
        delete-by-moving-to-trash t                                        ; move files to trash after deleting with dired
        vc-make-backup-files t                                             ; make backup file even when in vc
        backup-directory-alist `(("." . "~/.emacs.d/backups"))             ; dir to put backups file
        vc-follow-symlinks t                                               ; don't ask for confirmation when opening symlinks
        auto-save-file-name-transforms '((".*"
                                          "~/.emacs.d/auto-save-list/" t)) ; transform backups file name
        inhibit-startup-screen t                                           ; inhibit useless and old-school startup screen
        ring-bell-function 'ignore                                         ; silent bell
        coding-system-for-read 'utf-8                                      ; utf-8
        coding-system-for-write 'utf-8
        sentence-end-double-space nil                                      ; sentence should end with only a point
        default-fill-column 80
        initial-scratch-message "<3"
        tab-width 4
        indent-tabs-mode nil                                               ; use spaces
        require-final-newline t
        gc-cons-threshold 64000000)

  ;; lines numbers in programming mode
  (add-hook 'prog-mode-hook 'linum-mode)

  (blink-cursor-mode 0)
  (setq-default cursor-type 'box)
#+END_SRC

* Keybindings

Use [[https://github.com/noctuid/general.el][general.el]] for configuring key bindings. [[https://github.com/justbur/emacs-which-key][which-key]] for displaying next possible bindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key)
  (setq which-key-idle-delay 0.3)
  (which-key-mode)

  (use-package general)
#+END_SRC

* Misc
** Bars

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Yes and no

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Unicode support

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

** Algin regex with spaces instead of tabs

#+BEGIN_SRC emacs-lisp
  (defadvice align-regexp (around align-regexp-with-spaces activate)
    (let ((indent-tabs-mode nil))
      ad-do-it))
#+END_SRC

** Better duplicate buffer names

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

** Indent after newline

#+BEGIN_SRC emacs-lisp
;;  (general-define-key "RET" 'newline-and-indent)
#+END_SRC

** Delete current file

#+BEGIN_SRC emacs-lisp
  (defun delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+END_SRC

** Better Mac look and feel

#+BEGIN_SRC emacs-lisp
  ;; Fancy titlebar for MacOS
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+END_SRC

** Auto fill

#+BEGIN_SRC emacs-lisp
  (setq default-fill-column 120)

  (defun better-text-hook ()
    "Autofill and word wrap."
    (message "Better Text")
    ;; Turn off line numbering, it makes org so slow
    (linum-mode -1)
    ;; Set fill column to 79
    (setq fill-column 80)
    ;; Enable automatic line wrapping at fill column
    (auto-fill-mode t))

  (add-hook 'LaTeX-mode-hook 'better-text-hook)
  (add-hook 'org-mode-hook 'better-text-hook)
  (add-hook 'text-mode-hook 'better-text-hook)
  (add-hook 'markdown-mode-hook 'better-text-hook)
#+END_SRC

** Useful shortcuts

#+BEGIN_SRC emacs-lisp
  (defun open-todos ()
    "Open TODO file."
    (interactive)
    (find-file "~/Dropbox/org/todos.org"))

  (defun open-prodo ()
    "Open TODO file."
    (interactive)
    (find-file "~/Dropbox/org/prodo.org"))
#+END_SRC

* Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes)
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t
	doom-one-brighter-comments t
	doom-dracula-brighter-comments t)

  (load-theme 'doom-one t)
#+END_SRC

* Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :defer t
    :hook (after-init . doom-modeline-init))

  (setq doom-modeline-height 25
        doom-modeline-icon t)
#+END_SRC

* Font

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :family "Source Code Pro"
		      :height 150
		      :weight 'normal)
#+END_SRC

* Emojis

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :defer t
    :config
    (global-emoify-mode))
#+END_SRC

* Files

#+BEGIN_SRC emacs-lisp
  (general-define-key
    "C-x C-r" 'counsel-recentf)
#+END_SRC

* Buffers

#+BEGIN_SRC emacs-lisp
  (defun switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer)))

  (global-unset-key (kbd "C-x C-b"))

  (general-define-key
   "C-x TAB" '(switch-to-previous-buffer :which-key "prev buffer")
   "C-x C-b" '(:ignore t :which-key "buffers")
   "C-x C-b d" '(kill-current-buffer :which-key "delete buffer"))
#+END_SRC

* Window Management

#+BEGIN_SRC emacs-lisp
  (use-package ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar jake/help-temp-buffers '("^\\*Flycheck errors\\*$"
                                   "^\\*Completions\\*$"
                                   "^\\*GHC error\\*$"
                                   "^\\*Help\\*$"
                                   "^\\*HTTP Response\\*$"
                                   "^\\*TeX Help\\*$"))

  (while jake/help-temp-buffers
    (add-to-list 'display-buffer-alist
                 `(,(car jake/help-temp-buffers)
                   (display-buffer-reuse-window
                    display-buffer-below-selected)
                   (reusable-frames     . visible)
                   (side                        . bottom)
                   (window-height               . 0.30)))
    (setq jake/help-temp-buffers (cdr jake/help-temp-buffers)))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*compilation*" eos)
                 (display-buffer-reuse-window
                  display-buffer-below-selected)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.4)))
#+END_SRC

* Expand Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :config
    (setq delete-selection-mode t))

  (delete-selection-mode)

  (general-define-key
   "C-=" 'er/expand-region)
#+END_SRC

* Parens

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)

  (setq show-paren-delay 0)
  (setq show-paren-when-point-inside-paren t)

  (with-eval-after-load 'paren
    (set-face-background 'show-paren-match "#555555")
    (set-face-foreground 'show-paren-match "#def")
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold))

  (use-package rainbow-delimiters :straight t)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode-enable)
  ;; (electric-pair-mode t)

  (use-package smartparens)

  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode t)
  (setq sp-highlight-pair-overlay nil)

  (add-hook 'prog-mode #'smartparens-mode)
#+END_SRC

* Indentation and Buffer Cleanup

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer."
    (interactive)
    (indent-buffer)
    (untabify-buffer)
    (delete-trailing-whitespace))

  (defun cleanup-region (beg end)
    "Remove tmux artifacts from region."
    (interactive "r")
    (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
      (replace-regexp re "" nil beg end)))

  (general-define-key
   "C-c n" 'cleanup-buffer)

  (setq-default show-trailing-whitespace nil)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired-details+
    :config
    (setq dired-details-propagate-flat t))

  (use-package dired-subtree
    :after dired)
#+END_SRC

* Git

Git god mod

#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (use-package git-gutter
    :config
    (global-git-gutter-mode 1))
  (use-package git-gutter-fringe)

  (general-define-key
   "C-x C-g" 'magit)
#+END_SRC

* Projects

#+BEGIN_SRC emacs-lisp
  (use-package projectile)
  (use-package counsel-projectile)
  (projectile-mode)
  (counsel-projectile-mode)

  (general-define-key
   "C-x p" '(:ignore t :which-key "projects")
   "C-x p l" '(counsel-projectile-switch-project :which-key "switch project")
   "C-x p g" '(counsel-projectile-grep :which-key "grep project")
   "C-x p f" '(counsel-projectile-find-file :which-key "find file"))
#+END_SRC

* Org Mode
** Speed keys

#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

** Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
                              ;; make the lines wrap around edge of screen
                              (visual-line-mode)
                              (org-indent-mode)))

  (defun disable-fylcheck-in-org-src-block ()
    (flycheck-mode -1))

  (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-agenda-files (list "~/Dropbox/org/todos.org"
                               "~/Dropbox/org/assignments.org"
                               "~/Dropbox/org/notes.org"
                               "~/Dropbox/org/school.org"
                               "~/Dropbox/org/projects.org"
                               "~/Dropbox/org/home.org"
                               "~/Dropbox/org/mobile.org"
                               "~/Dropbox/org/scratch.org"
                               "~/Dropbox/org/scratch.org"
                               "~/Dropbox/org/prodo.org"
                               ))
#+END_SRC

** Capture
*** Templates

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (with-eval-after-load 'org
    (setq org-capture-templates '())
    (add-to-list 'org-capture-templates
                 '("t" "Todo" entry
                   (file+headline "~/Dropbox/org/todos.org" "Todos")
                   "* TODO %^{What Do}\n SCHEDULED: %^{Scheduled}t\n"
                   :empty-lines-after 1))
    (add-to-list 'org-capture-templates
                 '("p" "Prodo" entry
                   (file+headline "~/Dropbox/org/prodo.org" "Prodo")
                   "* TODO %^{What Do}\n"
                   :empty-lines-after 1))
    (add-to-list 'org-capture-templates
                 '("d" "Did" entry
                   (file+headline "~/Dropbox/org/did.org" "Did")
                   "* %?\n%U"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("k" "Keep" entry
                   (file+headline "~/Dropbox/org/keep.org" "Keep")
                   "* %?\n%U"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("n" "Note" entry
                   (file "~/Dropbox/org/notes.org")
                   "* %^{Title}\n%U\n\n%?\n"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("a" "Assignment" entry
                   (file+headline "~/Dropbox/org/assignments.org" "Assignments")
                   "* TODO %^{Title} %^g\n DEADLINE: %^{Deadline}t\n"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("i" "Idea" entry
                   (file+headline "~/Dropbox/org/ideas.org" "Ideas")
                   "* %^{Title}\n%u\n\n%?"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("j" "Journal" entry
                   (function org-journal-find-location)
                   "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
#+END_SRC

** Htmlize

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
* Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy)
#+END_SRC

* Ivy
** Deps

#+BEGIN_SRC emacs-lisp
  (use-package smex)
  (use-package flx)
#+END_SRC

** Ivy/Counsel/Swiper

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish (ivy-mode . "")
    :init
    (ivy-mode 1)
    :bind (:map ivy-minibuffer-map
                ("RET" . ivy-alt-done))
    :config
    (setq ivy-use-virtual-buffers t
          ivy-height 20
          ivy-count-format "(%d/%d) "
          ivy-display-style 'fancy
          ivy-format-function 'ivy-format-function-line
          ivy-initial-inputs-alist nil
          ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                  (t . ivy--regex-fuzzy))
          avy-timeout-seconds 0.4))

  (use-package swiper)
  (use-package counsel
    :config
    (counsel-mode 1))

  (general-define-key
   "C-s" 'swiper
   "M-x" 'counsel-M-x)

#+END_SRC

* IMenu

#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :config
    (setq imenu-list-auto-resize t))
#+END_SRC

* Dash Docs

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point)
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init (add-hook 'after-init-hook 'yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet)

  (setq-default yas-prompt-function '(yas-ido-prompt yas-dropdown-prompt))
#+END_SRC

* Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 2
          company-show-numbers nil
          company-tooltip-limit 20
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case t))

  (use-package company-flx
    :after company
    :config
    (company-flx-mode 1))

  (use-package company-quickhelp
    :config
    (company-quickhelp-mode))
#+END_SRC

* Tree

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config
    (setq neo-theme 'arrow
          neo-autorefresh nil))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
                                          ; (projectile-project-root)
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))

  (general-define-key
   "C-x t" '(neotree-project-dir-toggle :which-key "neotree"))
#+END_SRC

* Undo Tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC

* Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

** Text Size

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom nil
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
#+END_SRC

** Windows

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window (:color red
                                 :hint nil)
    "
    Movement^^        ^Split^         ^Switch^     ^Delete^
  ----------------------------------------------------------
  _h_ ←           _v_ertical      _b_uffer       _da_ce
  _j_ ↓           _x_ horizontal  _f_ind files   _da_ce
  _k_ ↑                         _s_wap         _dw_indow
  _l_ →                         _a_ce 1        _db_uffer
                                               _o_ther

                  _D_lt Other     _S_ave
  _q_ cancel
  "
    ("h" windmove-left )
    ("j" windmove-down )
    ("k" windmove-up )
    ("l" windmove-right )
    ("v" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right))
     )
    ("x" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down))
     )
    ("a" ace-window :exit t)
    ("b" ivy-switch-buffer)
    ("f" counsel-find-file)
    ("s" ace-swap-window)
    ("S" save-buffer)
    ("da" ace-delete-window)
    ("dw" delete-window)
    ("db" kill-this-buffer)
    ("o" delete-other-windows)
    ("D" (lambda ()
           (interactive)
           (ace-window 16)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body))
     )
    ("q" nil)
    )

  (general-define-key
   "C-x C-w" '(hydra-window/body :which-key "window hydra"))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-flycheck
    (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
     :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
     :hint nil)
    "Errors"
    ("f"  flycheck-error-list-set-filter                            "Filter")
    ("n"  flycheck-next-error                                       "Next")
    ("p"  flycheck-previous-error                                   "Previous")
    ("gg" flycheck-first-error                                      "First")
    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
    ("q"  nil))

  (general-define-key
   "C-x f" '(hydra-flycheck/body :which-key "hydra flycheck"))
#+END_SRC

** Applications

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-applications ()
    "Applications"
    ("p"  open-prodo "Prodo" :exit t)
    ("c" org-capture "Capture" :exit t)
    ("a" org-agenda-list "Agenda" :exit t)
    ("q"  nil))

  (general-define-key
   "C-x C-a" '(hydra-applications/body :which-key "apps"))
#+END_SRC

* Languages
** Spelling

#+BEGIN_SRC emacs-lisp
  (defun my-spellcheck-mode ()
    (flyspell-mode))

  (defun my-spellcheck-prog-mode ()
    (flyspell-prog-mode))

  (add-hook 'org-mode-hook 'my-spellcheck-mode)
  (add-hook 'markdown-mode-hook 'my-spellcheck-mode)
  (add-hook 'text-mode-hook 'my-spellcheck-mode)
  (add-hook 'latex-mode-hook 'my-spellcheck-mode)
#+END_SRC

** Syntax Checking

Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (defun flycheck-list-errors-toggle ()
    "Toggle the error list for the current buffer."
    (interactive)
    (let ((flycheck-errors-window (get-buffer-window flycheck-error-list-buffer)))
      (if (not (window-live-p flycheck-errors-window))
          (call-interactively 'flycheck-list-errors)
        (delete-window flycheck-errors-window))))

  (load "~/.emacs.d/flycheck-inline.el")
  (setq flycheck-display-errors-delay 0.3)
  (with-eval-after-load 'flycheck-inline
    (flycheck-inline-mode))
#+END_SRC

Keybindings

#+BEGIN_SRC emacs-lisp
  (general-define-key
   "C-," 'flycheck-previous-error
   "C-." 'flycheck-next-error)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Yaml

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package racer
    :config
    (general-define-key rust-mode-map
                        "TAB" 'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t
          rust-format-on-save t)
    :hook ((rust-mode . racer-mode)
           (racer-mode . eldoc-mode)
           (racer-mode . company-mode)))
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.hs" . haskell-mode))
    :hook ((haskell-mode . #'hindent-mode)))

  (use-package intero
    :after haskell-mode
    :hook ((haskell-mode . intero-mode)))

  (with-eval-after-load 'intero
    (flycheck-add-next-checker 'intero '(warning . haskell-hlint)))

  (use-package company-ghci
    :config
    (add-to-list 'company-backends 'company-ghci))

  (use-package hasky-stack)
#+END_SRC

** Elixir

#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode)
  (use-package alchemist)
#+END_SRC

** Elm

#+BEGIN_SRC emacs-lisp
  (use-package f)
  (use-package let-alist)
  (use-package s)
  (use-package dash)
  (use-package elm-mode
    :config
    (setq elm-tags-on-save t)
    (setq elm-sort-imports-on-save t)
    (setq elm-format-on-save t)
    (add-to-list 'company-backends 'company-elm))
#+END_SRC

** JavaScript
*** Js2

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  ;; better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

  ;; configs
  (setq js-indent-level 2)
#+END_SRC

*** Jsx

React stuff

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
#+END_SRC

*** Tern

#+BEGIN_SRC emacs-lisp
  (use-package tern)
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
#+END_SRC

*** Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package company-tern :straight t)
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'js2-mode-hook (lambda ()
                              (tern-mode)
                              (company-mode)))
#+END_SRC

*** Eslint

#+BEGIN_SRC emacs-lisp
  ;; disable jshint since we prefer eslint
  (setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(javascript-jshint)))

  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

Use local version of eslint is available

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/purcell/exec-path-from-shell
  ;; only need exec-path-from-shell on OSX
  ;; this hopefully sets up path and other vars better
  (use-package exec-path-from-shell :straight t)
  (when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
          (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

*** Json

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC

*** Prettier

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js :straight t)

  (setq prettier-js-args '(
                          "--trailing-comma" "all"
                          "--single-quote" "false"))

   (eval-after-load 'web-mode
      '(progn
         (add-hook 'web-mode-hook #'add-node-modules-path)
         (add-hook 'web-mode-hook #'prettier-js-mode)))

  (add-hook 'typescript-mode-hook #'prettier-js-mode)
  (add-hook 'js2-mode-hook #'prettier-js-mode)
  (add-hook 'json-mode-hook #'prettier-js-mode)
#+END_SRC

*** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)))

  (setq company-tooltip-align-annotations t)
  (setq typescript-indent-level 2)

  (defun tide-format()
    (message "nop"))

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))

  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (tide-restart-server)
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  ; (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

** Web

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2))

  ;; only use prettier for js/jsx web mode files
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))))
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.tsx?\\'" . prettier-js-mode))))

  ;; emmet
  (use-package emmet-mode :straight t)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'scss-mode-hook 'emmet-mode)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
* Rest Client

#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh"
        tramp-auto-save-directory "~/tmp/tramp"
        tramp-chunksize 2000)
#+END_SRC

* Server

So we can connect to emacs with ~emacsclient~

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
