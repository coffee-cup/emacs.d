#+TITLE: Emacs Configuration
#+AUTHOR: Jake Runzer
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* User Details

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jake Runzer")
  (setq user-mail-address "jakerunzer@gmail.com")
#+END_SRC

* Package Manager
** Use Package

Bootstrap use-package

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Straight.el

Use [[https://github.com/raxod502/straight.el][straight.el]] package manager. It is functional and more easily allows you to
change the code in the packages.

#+BEGIN_SRC emacs-lisp
  ; Load straight.el package manager
  (let ((bootstrap-file (concat user-emacs-directory "straight/repos/straight.el/bootstrap.el"))
	(bootstrap-version 3))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ; use-package straight.el integration
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC
* Better Defaults

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t                                              ; delete excess backup version silently
        version-control t                                                  ; use version control
        delete-by-moving-to-trash t                                        ; move files to trash after deleting with dired
        vc-make-backup-files t                                             ; make backup file even when in vc
        backup-directory-alist `(("." . "~/.emacs.d/backups"))             ; dir to put backups file
        vc-follow-symlinks t                                               ; don't ask for confirmation when opening symlinks
        auto-save-file-name-transforms '((".*"
                                          "~/.emacs.d/auto-save-list/" t)) ; transform backups file name
        inhibit-startup-screen t                                           ; inhibit useless and old-school startup screen
        ring-bell-function 'ignore                                         ; silent bell
        coding-system-for-read 'utf-8                                      ; utf-8
        coding-system-for-write 'utf-8
        sentence-end-double-space nil                                      ; sentence should end with only a point
        default-fill-column 80
        initial-scratch-message "<3"
        tab-width 4
        indent-tabs-mode nil                                               ; use spaces
        require-final-newline t
        gc-cons-threshold 64000000)

  ;; lines numbers in programming mode
  (add-hook 'prog-mode-hook 'linum-mode)

  (blink-cursor-mode 0)
  (setq-default cursor-type 'box)
#+END_SRC

* Keybindings

Use [[https://github.com/noctuid/general.el][general.el]] for configuring key bindings. [[https://github.com/justbur/emacs-which-key][which-key]] for displaying next possible bindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key)
  (setq which-key-idle-delay 0.3)
  (which-key-mode)

  (use-package general)
#+END_SRC

* Misc
** Bars

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Yes and no

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Unicode support

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

** Algin regex with spaces instead of tabs

#+BEGIN_SRC emacs-lisp
  (defadvice align-regexp (around align-regexp-with-spaces activate)
    (let ((indent-tabs-mode nil))
      ad-do-it))
#+END_SRC

** Better duplicate buffer names

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

** Indent after newline

#+BEGIN_SRC emacs-lisp
;;  (general-define-key "RET" 'newline-and-indent)
#+END_SRC

** Delete current file

#+BEGIN_SRC emacs-lisp
  (defun delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+END_SRC

** Better Mac look and feel

#+BEGIN_SRC emacs-lisp
  ;; Fancy titlebar for MacOS
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+END_SRC

** Auto fill

#+BEGIN_SRC emacs-lisp
  (setq default-fill-column 120)

  (defun better-text-hook ()
    "Autofill and word wrap."
    (message "Better Text")
    ;; Turn off line numbering, it makes org so slow
    (linum-mode -1)
    ;; Set fill column to 79
    (setq fill-column 80)
    ;; Enable automatic line wrapping at fill column
    (auto-fill-mode t))

  (add-hook 'LaTeX-mode-hook 'better-text-hook)
  (add-hook 'org-mode-hook 'better-text-hook)
  (add-hook 'text-mode-hook 'better-text-hook)
  (add-hook 'markdown-mode-hook 'better-text-hook)
#+END_SRC
* Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes)
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t
	doom-one-brighter-comments t
	doom-dracula-brighter-comments t)

  (load-theme 'doom-dracula t)
#+END_SRC
* Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :defer t
    :hook (after-init . doom-modeline-init))

  (setq doom-modeline-height 25
        doom-modeline-icon t)
#+END_SRC

* Font

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :family "Source Code Pro"
		      :height 150
		      :weight 'normal)
#+END_SRC

* Emojis

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :defer t
    :config
    (global-emoify-mode))
#+END_SRC

* Parens

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)

  (setq show-paren-delay 0)
  (setq show-paren-when-point-inside-paren t)

  (with-eval-after-load 'paren
    (set-face-background 'show-paren-match "#555555")
    (set-face-foreground 'show-paren-match "#def")
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold))

  (use-package rainbow-delimiters :straight t)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode-enable)
  ;; (electric-pair-mode t)

  (use-package smartparens)

  (require 'smartparens-config)
  (smartparens-global-mode)
  (show-smartparens-global-mode t)
  (setq sp-highlight-pair-overlay nil)

  (add-hook 'prog-mode #'smartparens-mode)
#+END_SRC

* Indentation and Buffer Cleanup

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer."
    (interactive)
    (indent-buffer)
    (untabify-buffer)
    (delete-trailing-whitespace))

  (defun cleanup-region (beg end)
    "Remove tmux artifacts from region."
    (interactive "r")
    (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
      (replace-regexp re "" nil beg end)))

  (general-define-key
   "C-c n" 'cleanup-buffer)

  (setq-default show-trailing-whitespace nil)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired-details+
    :config
    (setq dired-details-propagate-flat t))

  (use-package dired-subtree
    :after dired)
#+END_SRC

* Git

Git god mod

#+BEGIN_SRC emacs-lisp
  (use-package magit)

  (use-package git-gutter
    :config
    (global-git-gutter-mode 1))
  (use-package git-gutter-fringe)

  (general-define-key
   "C-c g" 'magit)
#+END_SRC

* Org Mode
** Speed keys

#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

** Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
                              ;; make the lines wrap around edge of screen
                              (visual-line-mode)
                              (org-indent-mode)))

  (setq org-startup-indented t)
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-agenda-files (list "~/Dropbox/org/todos.org"
                               "~/Dropbox/org/assignments.org"
                               "~/Dropbox/org/notes.org"
                               "~/Dropbox/org/school.org"
                               "~/Dropbox/org/projects.org"
                               "~/Dropbox/org/home.org"
                               "~/Dropbox/org/mobile.org"
                               "~/Dropbox/org/scratch.org"
                               "~/Dropbox/org/scratch.org"
                               "~/Dropbox/org/prodo.org"
                               ))
#+END_SRC

** Capture
*** Templates

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (with-eval-after-load 'org
    (setq org-capture-templates '())
    (add-to-list 'org-capture-templates
                 '("t" "Todo" entry
                   (file+headline "~/Dropbox/org/todos.org" "Todos")
                   "* TODO %^{What Do}\n SCHEDULED: %^{Scheduled}t\n"
                   :empty-lines-after 1))
    (add-to-list 'org-capture-templates
                 '("p" "Prodo" entry
                   (file+headline "~/Dropbox/org/prodo.org" "Prodo")
                   "* TODO %^{What Do}\n"
                   :empty-lines-after 1))
    (add-to-list 'org-capture-templates
                 '("d" "Did" entry
                   (file+headline "~/Dropbox/org/did.org" "Did")
                   "* %?\n%U"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("k" "Keep" entry
                   (file+headline "~/Dropbox/org/keep.org" "Keep")
                   "* %?\n%U"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("n" "Note" entry
                   (file "~/Dropbox/org/notes.org")
                   "* %^{Title}\n%U\n\n%?\n"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("a" "Assignment" entry
                   (file+headline "~/Dropbox/org/assignments.org" "Assignments")
                   "* TODO %^{Title} %^g\n DEADLINE: %^{Deadline}t\n"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("i" "Idea" entry
                   (file+headline "~/Dropbox/org/ideas.org" "Ideas")
                   "* %^{Title}\n%u\n\n%?"
                   :prepend t
                   :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("j" "Journal" entry
                   (function org-journal-find-location)
                   "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
#+END_SRC

** Htmlize

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
* Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy)
#+END_SRC

* Ivy
** Deps

#+BEGIN_SRC emacs-lisp
  (use-package smex)
  (use-package flx)
#+END_SRC

** Ivy/Counsel/Swiper

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish (ivy-mode . "")
    :init
    (ivy-mode 1)
    :bind (:map ivy-minibuffer-map
                ("RET" . ivy-alt-done))
    :config
    (setq ivy-use-virtual-buffers t
          ivy-height 20
          ivy-count-format "(%d/%d) "
          ivy-display-style 'fancy
          ivy-format-function 'ivy-format-function-line
          ivy-initial-inputs-alist nil
          ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                  (t . ivy--regex-fuzzy))
          avy-timeout-seconds 0.4))

  (use-package swiper)
  (use-package counsel
    :config
    (counsel-mode 1))

  (general-define-key
   "C-s" 'swiper
   "M-x" 'counsel-M-x)

#+END_SRC

* IMenu

#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :config
    (setq imenu-list-auto-resize t))
#+END_SRC

* Dash Docs

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point)
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init (add-hook 'after-init-hook 'yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet)

  (setq-default yas-prompt-function '(yas-ido-prompt yas-dropdown-prompt))
#+END_SRC

* Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 2
          company-show-numbers nil
          company-tooltip-limit 20
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case t))

  (use-package company-flx
    :after company
    :config
    (company-flx-mode 1))

  (use-package company-quickhelp
    :config
    (company-quickhelp-mode))
#+END_SRC
